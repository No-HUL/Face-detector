{"ast":null,"code":"var _jsxFileName = \"/home/norrentyu/ZTM/complete-web-developer/face-recognition/face-recognition-Frontend/src/App.js\";\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: new Date()\n  }\n};\nconst getClarifaiJSONRequest = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = '0e7d4e956d9945b298d1e5c2507823f7';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'norrentyu';\n  const APP_ID = 'face-recognition';\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n  // To use image bytes, assign its variable   \n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onPictureSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", getClarifaiJSONRequest(this.state.input)).then(response => response.json()).then(result => {\n        if (result) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          }).catch(console.log);\n        }\n        this.displayFaceBox(this.calculateFaceLocation(result));\n      }).catch(console.log);\n    };\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      } else {\n        this.setState({\n          route: route\n        });\n      }\n    };\n    this.state = initialState;\n  }\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange,\n        isSignedIn: isSignedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          onPictureSubmit: this.onPictureSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          imageUrl: imageUrl,\n          box: box\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["ParticlesBg","React","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","jsxDEV","_jsxDEV","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","Date","getClarifaiJSONRequest","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","value","onPictureSubmit","state","fetch","then","response","json","result","count","Object","assign","catch","console","log","onRouteChange","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber","onButtonSubmit"],"sources":["/home/norrentyu/ZTM/complete-web-developer/face-recognition/face-recognition-Frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport ParticlesBg from 'particles-bg';\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\n\nconst initialState = {\n  input:'',\n  imageUrl:'',\n  box:{},\n  route: 'signin',\n  isSignedIn: false,\n  user:{\n    id:'',\n    name:'',\n    email:'',\n    entries:0,\n    joined:new Date()\n  }\n}\n\nconst getClarifaiJSONRequest = (imageUrl) =>{  \n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = '0e7d4e956d9945b298d1e5c2507823f7';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'norrentyu';\n  const APP_ID = 'face-recognition';\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n  // To use image bytes, assign its variable   \n\n  const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                  }\n              }\n          }\n      ]\n  });\n\n  const requestOptions = {\n      method: 'POST',\n      headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n      },\n      body: raw\n  };\n  return requestOptions;\n}\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user:{\n        id:data.id,\n        name:data.name,\n        email:data.email,\n        entries:data.entries,\n        joined:data.joined\n      }\n    })\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    };\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  onPictureSubmit = () => {\n    this.setState({imageUrl:this.state.input});\n    fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", getClarifaiJSONRequest(this.state.input))\n    .then(response => response.json())\n    .then(result => {\n      if(result){\n        fetch('http://localhost:3000/image',{\n          method:'put',\n          headers:{'Content-Type':'application/json'},\n          body:JSON.stringify({\n            id:this.state.user.id\n          })\n        })\n        .then(response => response.json())\n        .then(count => {\n          this.setState(Object.assign(this.state.user, {entries:count}))\n        })\n        .catch(console.log);\n      }\n      this.displayFaceBox(this.calculateFaceLocation(result));\n    })\n    .catch(console.log);\n  }\n\n  onRouteChange = (route) => {\n    if(route === 'signout'){\n      this.setState(initialState)\n    } \n    else if(route === 'home'){\n      this.setState({isSignedIn: true})\n    }\n    else{\n      this.setState({route: route});\n    }\n  }\n\n  render(){\n    const {isSignedIn, imageUrl, route,box } = this.state;\n    return (\n      <div className=\"App\">\n        <ParticlesBg type='cobweb' bg={true} />\n        <Navigation \n          onRouteChange={this.onRouteChange}\n          isSignedIn={isSignedIn}/>\n        {(route === 'home')\n        ? <div>\n            <Logo /> \n            <Rank onPictureSubmit={this.onPictureSubmit}/>\n            <ImageLinkForm \n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition imageUrl={imageUrl} box={box}/>\n        </div>\n        : (\n          route === 'signin'\n          ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n          : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>)\n      }\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}